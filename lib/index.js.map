{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport { mapEvents } from 'sigh-core/lib/stream'\n\nfunction stylusTask(opts) {\n  // this function is called once for each subprocess in order to cache state,\n  // it is not a closure and does not have access to the surrounding state, use\n  // `require` to include any modules you need, for further info see\n  // https://github.com/ohjames/process-pool\n  var log = require('sigh-core').log;\n  var stylus = require(\"stylus\");\n  var Promise = require(\"bluebird\");\n  var fs = require(\"fs\");\n  var {resolve: path_resolve} = require(\"path\")\n\n  // this task runs inside the subprocess to transform each event\n  return event => {\n    return new Promise((resolve, reject) => {\n      var styl = stylus(event.data)\n          .set('filename', event.path)\n          .set('sourcemap', {\n            comment: false,\n            sourceRoot: event.projectPath\n          })\n      ;\n      if (opts && opts.use) {\n        opts.use.forEach(function(use) {\n          styl = styl.use(require(use)());\n        })\n      }\n      if (opts && opts.import) {\n        opts.import.forEach(function(_import) {\n          styl = styl.import(_import);\n        })\n      }\n      styl.render(function(err, css) {\n        if (err) {\n          reject(err)\n        } else {\n          delete styl.sourcemap.sourceRoot\n          styl.sourcemap.sourcesContent = styl.sourcemap.sources.map(fname => fs.readFileSync(path_resolve(fname), \"utf8\"))\n          resolve({\n            data: css,\n            map: styl.sourcemap\n          })\n        }\n      })\n    });\n  }\n}\n\nfunction adaptEvent(compiler) {\n  // data sent to/received from the subprocess has to be serialised/deserialised\n  return event => {\n    if (event.type !== 'add' && event.type !== 'change')\n      return event;\n\n    if (event.fileType !== 'styl') return event\n\n    return compiler(_.pick(event, 'type', 'data', 'path', 'projectPath', 'sourcePath')).then(({data, map}) => {\n      event.data = data;\n\n      if (map) {\n        event.applySourceMap(map);\n      }\n\n      event.changeFileSuffix('css')\n      return event\n    })\n  }\n}\n\nvar pooledProc;\n\nexport default function(op, opts = {}) {\n  if (! pooledProc)\n    pooledProc = op.procPool.prepare(stylusTask, opts);\n\n  return mapEvents(op.stream, adaptEvent(pooledProc))\n}\n"]}